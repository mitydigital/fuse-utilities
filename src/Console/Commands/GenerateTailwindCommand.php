<?php

namespace MityDigital\FuseUtilities\Console\Commands;

use Exception;
use Illuminate\Console\Command;
use Illuminate\Support\Arr;
use Statamic\Facades\YAML;

class GenerateTailwindCommand extends Command
{
    protected $signature = 'fuse:generate-tailwind';

    protected $description = 'Generate a HTML file of complete class names for a set of colours and classes.';

    public function handle(): void
    {
        // open the resources/tailwind/config.yaml file
        $config = resource_path('tailwind/config.yaml');
        $target = resource_path('tailwind/generated.html');

        if (! file_exists($config)) {
            $this->error($config.' could not be found. Cannot run generator.');

            return;
        }

        $yaml = null;
        try {
            // parse the yaml
            $yaml = YAML::parse(file_get_contents($config));
        } catch (Exception $e) {
            $this->error($config.' could not be parsed. Cannot run generator.');

            return;
        }

        // do we have the expected format
        if (! array_key_exists('colours', $yaml)) {
            $this->error('YAML is missing "colours" property.');
        }

        if (! array_key_exists('classes', $yaml)) {
            $this->error('YAML is missing "classes" property.');
        }

        // get the tailwind version
        $tailwind = Arr::get($yaml, 'version', 3);

        // store the html here
        $html = [];

        if ($tailwind === 3) {
            $html = $this->generateV3($yaml);
        } elseif ($tailwind === 4) {
            $html = $this->generateV4($yaml);
        } else {
            $this->error('Unknown Tailwind version');
        }

        $contents = '<!-- THIS FILE IS GENERATED BY THE COMMAND php artisan fuse:generate-tailwind -->'."\r\n";
        $contents .= '<!-- Make changes to your config.yaml file, then re-run the command to update this file -->'."\r\n";
        $contents .= implode("\r\n", $html);

        // save the output
        file_put_contents($target, $contents);

        $this->info('Huzzah! Your config has been generated auto-magically!');
    }

    protected function generateV3($yaml)
    {
        $html = [];

        // start the loop
        foreach ($yaml['colours'] as $colour) {
            $classes = [];
            foreach ($yaml['classes'] as $class) {
                // merge the colour to the class
                $classes[] = str_replace('[colour]', $colour, strtolower($class));
            }

            // add to the html
            $html[] = '<div class="'.implode(' ', $classes).'"></div>';
        }

        $html[] = '<div class="'.implode(' ', Arr::get($yaml, 'standard', [])).'"></div>';

        return $html;
    }

    protected function generateV4($yaml)
    {
        $html = [];

        // start the loop
        foreach ($yaml['colours'] as $colour) {
            $classes = [];
            foreach ($yaml['classes'] as $class) {
                // merge the colour to the class
                $classes[] = str_replace('[colour]', $colour, strtolower($class));
            }

            // add to the html
            $html[] = '<div class="'.implode(' ', $classes).'"></div>';
        }

        $html[] = '<div class="'.implode(' ', Arr::get($yaml, 'standard', [])).'"></div>';

        return $html;
    }
}
